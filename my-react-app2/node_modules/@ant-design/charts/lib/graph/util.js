"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.processMinimap = exports.getGraphSize = void 0;

var _es = _interopRequireDefault(require("@antv/g6/es"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultMinimapCfg = {
  show: false,
  size: [150, 100],
  type: 'keyShape'
};

var getGraphSize = function getGraphSize(width, height, container) {
  var CANVAS_WIDTH, CANVAS_HEIGHT;

  if (container && container.current) {
    CANVAS_WIDTH = container.current.offsetWidth;
    CANVAS_HEIGHT = container.current.offsetHeight || 500;
  }

  console.log('graph size', CANVAS_WIDTH, CANVAS_HEIGHT, height, width, container, container.current);

  if (!width && !CANVAS_WIDTH || !height && !CANVAS_HEIGHT) {
    console.warn('请为 Graph 指定 width 与 height！否则将使用默认值 500 * 500');
    return [500, 500];
  }

  return [width || CANVAS_WIDTH || 500, height || CANVAS_HEIGHT || 500];
};

exports.getGraphSize = getGraphSize;

var processMinimap = function processMinimap(cfg, graph) {
  if (!graph || graph.destroyed) return;

  if (cfg && cfg.show) {
    var curMminimapCfg = Object.assign(defaultMinimapCfg, cfg);
    var minimap = new _es.default.Minimap(_objectSpread({}, curMminimapCfg));
    graph.addPlugin(minimap);
    return minimap;
  }

  return;
};

exports.processMinimap = processMinimap;