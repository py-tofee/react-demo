"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _es = _interopRequireDefault(require("@antv/g6/es"));

var _base = require("../base");

var _util = require("./util");

var _useGraph = _interopRequireDefault(require("../hooks/useGraph"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var defaultStateStyles = {
  hover: {
    stroke: '#1890ff',
    lineWidth: 2
  }
};
var defaultNodeSize = [150, 30];
var defaultNodeStyle = {
  stroke: '#72CC4A',
  fill: '#f00'
};
var defaultNodeAnchorPoints = [[0.5, 0], [0.5, 1]];
var defaultEdgeStyle = {
  stroke: '#91d5ff',
  endArrow: {
    path: _es.default.Arrow.vee(10, 10),
    fill: '#91d5ff'
  }
};
var defaultLayout = {
  type: 'dagre',
  rankdir: 'LR',
  nodesep: 30,
  ranksep: 50
};
var defaultLabelCfg = {
  style: {
    fill: '#000000A6',
    fontSize: 10
  }
};
var graph;

var DagreFundFlowGraph = function DagreFundFlowGraph(_ref) {
  var data = _ref.data,
      className = _ref.className,
      style = _ref.style,
      width = _ref.width,
      height = _ref.height,
      _ref$nodeType = _ref.nodeType,
      nodeType = _ref$nodeType === void 0 ? 'round-rect' : _ref$nodeType,
      _ref$edgeType = _ref.edgeType,
      edgeType = _ref$edgeType === void 0 ? 'fund-polyline' : _ref$edgeType,
      _ref$behaviors = _ref.behaviors,
      behaviors = _ref$behaviors === void 0 ? ['zoom-canvas', 'drag-canvas'] : _ref$behaviors,
      _ref$nodeSize = _ref.nodeSize,
      nodeSize = _ref$nodeSize === void 0 ? defaultNodeSize : _ref$nodeSize,
      _ref$nodeLabelCfg = _ref.nodeLabelCfg,
      nodeLabelCfg = _ref$nodeLabelCfg === void 0 ? defaultLabelCfg : _ref$nodeLabelCfg,
      _ref$edgeLabelCfg = _ref.edgeLabelCfg,
      edgeLabelCfg = _ref$edgeLabelCfg === void 0 ? defaultLabelCfg : _ref$edgeLabelCfg,
      _ref$nodeAnchorPoints = _ref.nodeAnchorPoints,
      nodeAnchorPoints = _ref$nodeAnchorPoints === void 0 ? defaultNodeAnchorPoints : _ref$nodeAnchorPoints,
      _ref$layout = _ref.layout,
      layout = _ref$layout === void 0 ? defaultLayout : _ref$layout,
      minimapCfg = _ref.minimapCfg,
      _ref$nodeStyle = _ref.nodeStyle,
      nodeStyle = _ref$nodeStyle === void 0 ? defaultNodeStyle : _ref$nodeStyle,
      _ref$edgeStyle = _ref.edgeStyle,
      edgeStyle = _ref$edgeStyle === void 0 ? defaultEdgeStyle : _ref$edgeStyle,
      _ref$nodeStateStyles = _ref.nodeStateStyles,
      nodeStateStyles = _ref$nodeStateStyles === void 0 ? defaultStateStyles : _ref$nodeStateStyles,
      _ref$edgeStateStyles = _ref.edgeStateStyles,
      edgeStateStyles = _ref$edgeStateStyles === void 0 ? defaultStateStyles : _ref$edgeStateStyles,
      _ref$colorMap = _ref.colorMap,
      colorMap = _ref$colorMap === void 0 ? {} : _ref$colorMap,
      handleEdgeClick = _ref.handleEdgeClick,
      handleEdgeHover = _ref.handleEdgeHover,
      handleEdgeUnHover = _ref.handleEdgeUnHover,
      handleNodeClick = _ref.handleNodeClick,
      handleNodeHover = _ref.handleNodeHover,
      handleNodeUnHover = _ref.handleNodeUnHover,
      handleCanvasClick = _ref.handleCanvasClick,
      graphRef = _ref.graphRef;

  var container = _react.default.useRef(null);

  var props = {
    data: data,
    className: className,
    style: style,
    width: width,
    height: height,
    nodeType: nodeType,
    edgeType: edgeType,
    behaviors: behaviors,
    nodeSize: nodeSize,
    nodeLabelCfg: nodeLabelCfg,
    edgeLabelCfg: edgeLabelCfg,
    nodeAnchorPoints: nodeAnchorPoints,
    layout: layout,
    minimapCfg: minimapCfg,
    nodeStyle: nodeStyle,
    edgeStyle: edgeStyle,
    nodeStateStyles: nodeStateStyles,
    edgeStateStyles: edgeStateStyles,
    colorMap: colorMap,
    handleEdgeClick: handleEdgeClick,
    handleEdgeHover: handleEdgeHover,
    handleEdgeUnHover: handleEdgeUnHover,
    handleNodeClick: handleNodeClick,
    handleNodeHover: handleNodeHover,
    handleNodeUnHover: handleNodeUnHover,
    handleCanvasClick: handleCanvasClick,
    graphRef: graphRef
  };
  (0, _useGraph.default)(graph, props, container);
  (0, _react.useEffect)(function () {
    var graphSize = (0, _util.getGraphSize)(width, height, container);

    if (!graph || graph.destroyed) {
      graph = new _es.default.Graph({
        container: container.current,
        width: graphSize[0],
        height: graphSize[1],
        modes: {
          default: behaviors
        },
        defaultNode: {
          type: nodeType,
          size: nodeSize,
          style: nodeStyle,
          anchorPoints: nodeAnchorPoints,
          labelCfg: nodeLabelCfg
        },
        defaultEdge: {
          type: edgeType,
          style: edgeStyle,
          colorMap: colorMap,
          labelCfg: edgeLabelCfg
        },
        nodeStateStyles: nodeStateStyles,
        edgeStateStyles: edgeStateStyles,
        layout: layout
      });

      if (graphRef) {
        graphRef.current = graph;
      }
    }

    (0, _util.processMinimap)(minimapCfg, graph);
    graph.data(data);
    graph.render(); // modify the node color according to the in edge

    var edges = graph.getEdges();
    edges.forEach(function (edge) {
      var line = edge.getKeyShape();
      var stroke = line.attr('stroke');
      var targetNode = edge.getTarget();
      targetNode.update({
        style: {
          stroke: stroke
        }
      });
    });
    graph.fitView();
    graph.on('edge:mouseenter', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', true);

      if (handleEdgeHover) {
        handleEdgeHover(item, graph);
      }
    });
    graph.on('edge:mouseleave', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', false);

      if (handleEdgeUnHover) {
        handleEdgeUnHover(item, graph);
      }
    });
    graph.on('edge:click', function (evt) {
      var item = evt.item;

      if (handleEdgeClick) {
        handleEdgeClick(item, graph);
      }
    });
    graph.on('node:mouseenter', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', false);

      if (handleNodeHover) {
        handleNodeHover(item, graph);
      }
    });
    graph.on('node:mouseleave', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', false);

      if (handleNodeUnHover) {
        handleNodeUnHover(item, graph);
      }
    });
    graph.on('node:click', function (evt) {
      var item = evt.item;

      if (handleNodeClick) {
        handleNodeClick(item, graph);
      }
    });
    graph.on('canvas:click', function (evt) {
      handleCanvasClick && handleCanvasClick(graph);
    });
    return function () {
      return graph.destroy();
    };
  }, []);
  return _react.default.createElement(_base.ErrorBoundary, null, _react.default.createElement("div", {
    className: className,
    style: style,
    ref: container
  }));
};

var _default = DagreFundFlowGraph;
exports.default = _default;