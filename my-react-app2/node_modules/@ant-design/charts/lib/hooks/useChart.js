"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = useInit;

var _react = require("react");

var _util = require("../util");

var _createNode = _interopRequireDefault(require("../util/createNode"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function useInit(ChartClass, config) {
  var chart = (0, _react.useRef)();
  var container = (0, _react.useRef)(null);
  /**
   * Get data base64
   * @param {string} type A DOMString indicating the image format. The default format type is image/png.
   * @param {number} encoderOptions A Number between 0 and 1 indicating the image quality
   */

  var toDataURL = function toDataURL() {
    var _chart$current;

    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'image/png';
    var encoderOptions = arguments.length > 1 ? arguments[1] : undefined;
    return (_chart$current = chart.current) === null || _chart$current === void 0 ? void 0 : _chart$current.canvas.cfg.el.toDataURL(type, encoderOptions);
  };
  /**
   * Download Iamge
   * @param {string} name A name of image
   * @param {string} type A DOMString indicating the image format. The default format type is image/png.
   * @param {number} encoderOptions A Number between 0 and 1 indicating the image quality
   */


  var downloadImage = function downloadImage(name) {
    var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'image/png';
    var encoderOptions = arguments.length > 2 ? arguments[2] : undefined;

    try {
      var _chart$current2;

      // default png
      if (name && name.indexOf('.') === -1) {
        name = "".concat(name, ".png");
      }

      var imageName = name;

      if (!imageName) {
        var _config$title;

        var _config = config; // 默认值：图表 title -> 图表类型

        imageName = "".concat((_config === null || _config === void 0 ? void 0 : (_config$title = _config.title) === null || _config$title === void 0 ? void 0 : _config$title.text) || (ChartClass === null || ChartClass === void 0 ? void 0 : ChartClass.name), ".png");
      }

      var base64 = (_chart$current2 = chart.current) === null || _chart$current2 === void 0 ? void 0 : _chart$current2.canvas.cfg.el.toDataURL(type, encoderOptions);
      var a = document.createElement('a');
      a.href = base64;
      a.download = imageName;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      a = null;
    } catch (err) {
      console.log(err);
    }
  };

  var processConfig = function processConfig() {
    var _config$statistic, _config$tooltip, _config$tooltip$custo, _config$tooltip2, _config$tooltip2$cust;

    // @ts-ignore 该属性只有 Liquid 和 Dount 存在且配置不一致，类型定义先忽略
    if ((_config$statistic = config.statistic) === null || _config$statistic === void 0 ? void 0 : _config$statistic.htmlContent) {
      // @ts-ignore
      var statisticHtmlContent = config.statistic.htmlContent; // @ts-ignore

      config.statistic.htmlContent = function () {
        var statisticDom = statisticHtmlContent.apply(void 0, arguments);

        if (_util.utils.isType(statisticDom, 'String') || _util.utils.isType(statisticDom, 'Number') || _util.utils.isType(statisticDom, 'HTMLDivElement')) {
          return statisticDom;
        }

        return (0, _createNode.default)(statisticDom);
      };
    }
    /* tooltip 支持 ReactNode, 1.0 版本会改用 createPortal  */


    if ((_config$tooltip = config.tooltip) === null || _config$tooltip === void 0 ? void 0 : (_config$tooltip$custo = _config$tooltip.custom) === null || _config$tooltip$custo === void 0 ? void 0 : _config$tooltip$custo.container) {
      config.tooltip.custom.container = (0, _createNode.default)(config.tooltip.custom.container);
    }

    if ((_config$tooltip2 = config.tooltip) === null || _config$tooltip2 === void 0 ? void 0 : (_config$tooltip2$cust = _config$tooltip2.custom) === null || _config$tooltip2$cust === void 0 ? void 0 : _config$tooltip2$cust.customContent) {
      var customContent = config.tooltip.custom.customContent;

      config.tooltip.custom.customContent = function (title, items) {
        var tooltipDom = customContent(title, items) || '';

        if (_util.utils.isType(tooltipDom, 'HTMLDivElement')) {
          return tooltipDom;
        }

        return (0, _createNode.default)(tooltipDom);
      };
    }
  };

  (0, _react.useEffect)(function () {
    if (chart.current) {
      if (config.onlyChangeData) {
        chart.current.changeData((config === null || config === void 0 ? void 0 : config.data) || []);
      } else {
        processConfig();
        chart.current.updateConfig(config);
        chart.current.render();
      }
    } // 比对方法已更新，请查看 v2 分支

  }, [(config === null || config === void 0 ? void 0 : config.memoData) ? config.memoData : JSON.stringify(config)]);
  (0, _react.useEffect)(function () {
    if (!container.current) {
      return function () {
        return null;
      };
    }

    processConfig();
    var chartInstance = new ChartClass(container.current, _objectSpread({}, config));

    chartInstance.__proto__.toDataURL = function (type, encoderOptions) {
      return toDataURL(type, encoderOptions);
    };

    chartInstance.__proto__.downloadImage = function (name, type, encoderOptions) {
      return downloadImage(name, type, encoderOptions);
    };

    chartInstance.render();
    chart.current = _util.utils.clone(chartInstance);
    return function () {
      return chartInstance.destroy();
    };
  }, []);
  return {
    chart: chart,
    container: container,
    toDataURL: toDataURL,
    downloadImage: downloadImage
  };
}