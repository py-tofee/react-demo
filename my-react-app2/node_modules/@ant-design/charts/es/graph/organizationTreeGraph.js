import React, { useEffect } from 'react';
import G6 from '@antv/g6/es';
import { ErrorBoundary } from '../base';
import { customIconNode } from './customItems';
import { getGraphSize, processMinimap } from './util';
import useGraph from '../hooks/useGraph';
var defaultStateStyles = {
  hover: {
    stroke: '#1890ff',
    lineWidth: 2
  }
};
var defaultNodeStyle = {
  fill: '#91d5ff',
  stroke: '#40a9ff',
  radius: 5
};
var defaultEdgeStyle = {
  stroke: '#91d5ff',
  endArrow: {
    path: 'M 0,0 L 12, 6 L 9,0 L 12, -6 Z',
    fill: '#91d5ff',
    d: -20
  }
};
var defaultLayout = {
  type: 'compactBox',
  direction: 'TB',
  getId: function getId(d) {
    return d.id;
  },
  getHeight: function getHeight() {
    return 16;
  },
  getWidth: function getWidth() {
    return 16;
  },
  getVGap: function getVGap() {
    return 40;
  },
  getHGap: function getHGap() {
    return 70;
  }
};
var defaultLabelCfg = {
  style: {
    fill: '#000',
    fontSize: 12
  }
};
var graph;

var OrganizationTreeGraphComponent = function OrganizationTreeGraphComponent(_ref) {
  var data = _ref.data,
      className = _ref.className,
      style = _ref.style,
      width = _ref.width,
      height = _ref.height,
      _ref$nodeType = _ref.nodeType,
      nodeType = _ref$nodeType === void 0 ? 'rect' : _ref$nodeType,
      _ref$edgeType = _ref.edgeType,
      edgeType = _ref$edgeType === void 0 ? 'flow-line' : _ref$edgeType,
      _ref$collapseExpand = _ref.collapseExpand,
      collapseExpand = _ref$collapseExpand === void 0 ? false : _ref$collapseExpand,
      _ref$nodeSize = _ref.nodeSize,
      nodeSize = _ref$nodeSize === void 0 ? [120, 40] : _ref$nodeSize,
      _ref$nodeLabelCfg = _ref.nodeLabelCfg,
      nodeLabelCfg = _ref$nodeLabelCfg === void 0 ? defaultLabelCfg : _ref$nodeLabelCfg,
      _ref$edgeLabelCfg = _ref.edgeLabelCfg,
      edgeLabelCfg = _ref$edgeLabelCfg === void 0 ? defaultLabelCfg : _ref$edgeLabelCfg,
      _ref$layout = _ref.layout,
      layout = _ref$layout === void 0 ? defaultLayout : _ref$layout,
      _ref$enableEdit = _ref.enableEdit,
      enableEdit = _ref$enableEdit === void 0 ? false : _ref$enableEdit,
      minimapCfg = _ref.minimapCfg,
      _ref$nodeStyle = _ref.nodeStyle,
      nodeStyle = _ref$nodeStyle === void 0 ? defaultNodeStyle : _ref$nodeStyle,
      _ref$edgeStyle = _ref.edgeStyle,
      edgeStyle = _ref$edgeStyle === void 0 ? defaultEdgeStyle : _ref$edgeStyle,
      _ref$nodeStateStyles = _ref.nodeStateStyles,
      nodeStateStyles = _ref$nodeStateStyles === void 0 ? defaultStateStyles : _ref$nodeStateStyles,
      _ref$edgeStateStyles = _ref.edgeStateStyles,
      edgeStateStyles = _ref$edgeStateStyles === void 0 ? defaultStateStyles : _ref$edgeStateStyles,
      handleNodeClick = _ref.handleNodeClick,
      handleEdgeClick = _ref.handleEdgeClick,
      handleNodeHover = _ref.handleNodeHover,
      handleNodeUnHover = _ref.handleNodeUnHover,
      handleEdgeHover = _ref.handleEdgeHover,
      handleEdgeUnHover = _ref.handleEdgeUnHover,
      handleCanvasClick = _ref.handleCanvasClick,
      graphRef = _ref.graphRef;
  var props = {
    data: data,
    className: className,
    style: style,
    width: width,
    height: height,
    nodeType: nodeType,
    edgeType: edgeType,
    collapseExpand: collapseExpand,
    nodeSize: nodeSize,
    nodeLabelCfg: nodeLabelCfg,
    edgeLabelCfg: edgeLabelCfg,
    layout: layout,
    enableEdit: enableEdit,
    minimapCfg: minimapCfg,
    nodeStyle: nodeStyle,
    edgeStyle: edgeStyle,
    nodeStateStyles: nodeStateStyles,
    edgeStateStyles: edgeStateStyles,
    handleNodeClick: handleNodeClick,
    handleEdgeClick: handleEdgeClick,
    handleNodeHover: handleNodeHover,
    handleNodeUnHover: handleNodeUnHover,
    handleEdgeHover: handleEdgeHover,
    handleEdgeUnHover: handleEdgeUnHover,
    handleCanvasClick: handleCanvasClick,
    graphRef: graphRef
  };
  var container = React.useRef(null);
  useGraph(graph, props, container);
  useEffect(function () {
    var graphSize = getGraphSize(width, height, container);

    if (!graph || graph.destroyed) {
      if (nodeType === 'icon-node') {
        customIconNode({
          enableEdit: enableEdit
        });
      }

      graph = new G6.TreeGraph({
        container: container.current,
        width: graphSize[0],
        height: graphSize[1],
        linkCenter: true,
        modes: {
          default: ['drag-canvas', 'zoom-canvas']
        },
        defaultNode: {
          type: nodeType,
          size: nodeSize,
          style: nodeStyle,
          labelCfg: nodeLabelCfg
        },
        defaultEdge: {
          type: edgeType,
          style: edgeStyle,
          labelCfg: edgeLabelCfg
        },
        nodeStateStyles: nodeStateStyles,
        edgeStateStyles: edgeStateStyles,
        layout: layout
      });

      if (graphRef) {
        graphRef.current = graph;
      }
    }

    processMinimap(minimapCfg, graph);
    graph.data(data);
    graph.render();
    graph.fitView();

    if (collapseExpand) {
      graph.addBehaviors({
        type: 'collapse-expand',
        onChange: function onChange(item, collapsed) {
          if (!item) {
            return false;
          }

          var data = item.get('model').data;
          data.collapsed = collapsed;
          return true;
        }
      }, 'default');
    }

    graph.on('node:mouseenter', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', true);

      if (handleNodeHover) {
        handleNodeHover(item, graph);
      }
    });
    graph.on('node:mouseleave', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', false);

      if (handleNodeUnHover) {
        handleNodeUnHover(item, graph);
      }
    });
    graph.on('node:click', function (evt) {
      var item = evt.item,
          target = evt.target;
      var targetType = target.get('type');
      var name = target.get('name'); // 增加元素

      if (targetType === 'marker') {
        var model = item.getModel();

        if (name === 'add-item') {
          if (!model.children) {
            model.children = [];
          }

          var tmpId = Math.random().toString(36).slice(-8);
          model.children.push({
            id: tmpId,
            label: tmpId
          });
          graph.updateChild(model, model.id);
        } else if (name === 'remove-item') {
          graph.removeChild(model.id);
        }
      } else {
        if (handleNodeClick) {
          handleNodeClick(item, graph);
        }
      }
    });
    graph.on('edge:mouseenter', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', true);

      if (handleEdgeHover) {
        handleEdgeHover(item, graph);
      }
    });
    graph.on('edge:mouseleave', function (evt) {
      var item = evt.item;
      graph.setItemState(item, 'hover', false);

      if (handleEdgeUnHover) {
        handleEdgeUnHover(item, graph);
      }
    });
    graph.on('edge:click', function (evt) {
      var item = evt.item;

      if (handleEdgeClick) {
        handleEdgeClick(item, graph);
      }
    });
    graph.on('canvas:click', function (evt) {
      handleCanvasClick && handleCanvasClick(graph);
    });
    return function () {
      return graph.destroy();
    };
  }, []);
  return React.createElement(ErrorBoundary, null, React.createElement("div", {
    className: className,
    style: style,
    ref: container
  }));
};

export default OrganizationTreeGraphComponent;