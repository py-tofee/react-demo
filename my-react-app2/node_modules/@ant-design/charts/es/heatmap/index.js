function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React, { useEffect, useImperativeHandle, forwardRef } from 'react';
import { Heatmap as G2plotHeatmap } from '@antv/g2plot';
import useChart from '../hooks/useChart';
import { ErrorBoundary } from '../base';
var HeatmapChart = forwardRef(function (props, ref) {
  var chartRef = props.chartRef,
      _props$style = props.style,
      style = _props$style === void 0 ? {} : _props$style,
      className = props.className,
      rest = _objectWithoutProperties(props, ["chartRef", "style", "className"]);

  var _useChart = useChart(G2plotHeatmap, rest),
      chart = _useChart.chart,
      container = _useChart.container;

  useEffect(function () {
    if (chartRef) {
      chartRef.current = chart.current;
    }
  }, [chart.current]);
  useImperativeHandle(ref, function () {
    return {
      getChart: function getChart() {
        return chart.current;
      }
    };
  });
  return React.createElement(ErrorBoundary, null, React.createElement("div", {
    className: className,
    style: style,
    ref: container
  }));
});
HeatmapChart.defaultProps = G2plotHeatmap.getDefaultOptions();
export default HeatmapChart;