{"version":3,"sources":["../../src/plugins/DataSourcePlugin.ts"],"names":["DataSourcePlugin","layer","mapService","getContainer","get","TYPES","IMapService","hooks","init","tap","source","getSource","sourceOption","data","options","setSource","Source","updateClusterData","beforeRenderData","neeUpdateCluster","dataSourceNeedUpdate","dataState","cluster","clusterOptions","zoom","maxZoom","newZoom","getZoom","Math","abs","floor"],"mappings":";;;;;;;;;;;;;;;AAAA;;AAOA;;AACA;;;;IAIqBA,gB,WADpB,4B;;;;;;;;WAGC,eAAaC,KAAb,EAA4B;AAAA;;AAC1B,WAAKC,UAAL,GAAkBD,KAAK,CAACE,YAAN,GAAqBC,GAArB,CAAsCC,cAAMC,WAA5C,CAAlB;AACAL,MAAAA,KAAK,CAACM,KAAN,CAAYC,IAAZ,CAAiBC,GAAjB,CAAqB,kBAArB,EAAyC,YAAM;AAC7C,YAAMC,MAAM,GAAGT,KAAK,CAACU,SAAN,EAAf;;AACA,YAAI,CAACD,MAAL,EAAa;AACX,oCAA0BT,KAAK,CAACW,YAAhC;AAAA,cAAQC,IAAR,uBAAQA,IAAR;AAAA,cAAcC,OAAd,uBAAcA,OAAd;AACAb,UAAAA,KAAK,CAACc,SAAN,CAAgB,IAAIC,iBAAJ,CAAWH,IAAX,EAAiBC,OAAjB,CAAhB;AACD;;AAED,QAAA,KAAI,CAACG,iBAAL,CAAuBhB,KAAvB;AACD,OARD;AAWAA,MAAAA,KAAK,CAACM,KAAN,CAAYW,gBAAZ,CAA6BT,GAA7B,CAAiC,kBAAjC,EAAqD,YAAM;AACzD,YAAMU,gBAAgB,GAAG,KAAI,CAACF,iBAAL,CAAuBhB,KAAvB,CAAzB;;AACA,YAAMmB,oBAAoB,GAAGnB,KAAK,CAACoB,SAAN,CAAgBD,oBAA7C;AACAnB,QAAAA,KAAK,CAACoB,SAAN,CAAgBD,oBAAhB,GAAuC,KAAvC;AACA,eAAOD,gBAAgB,IAAIC,oBAA3B;AACD,OALD;AAMD;;;WAED,2BAA0BnB,KAA1B,EAAkD;AAChD,UAAMS,MAAM,GAAGT,KAAK,CAACU,SAAN,EAAf;AACA,UAAMW,OAAO,GAAGZ,MAAM,CAACY,OAAvB;AACA,kCAAmCZ,MAAM,CAACa,cAA1C;AAAA,yDAAQC,IAAR;AAAA,UAAQA,IAAR,uCAAe,CAAf;AAAA,yDAAkBC,OAAlB;AAAA,UAAkBA,OAAlB,uCAA4B,EAA5B;AACA,UAAMC,OAAO,GAAG,KAAKxB,UAAL,CAAgByB,OAAhB,KAA4B,CAA5C;AACA,UAAMP,oBAAoB,GAAGnB,KAAK,CAACoB,SAAN,CAAgBD,oBAA7C;;AAEA,UACEE,OAAO,KACNF,oBAAoB,IAAIQ,IAAI,CAACC,GAAL,CAASL,IAAI,GAAGE,OAAhB,IAA2B,CAD7C,CAAP,IAEAD,OAAO,GAAGD,IAHZ,EAIE;AACAd,QAAAA,MAAM,CAACO,iBAAP,CAAyBW,IAAI,CAACE,KAAL,CAAWJ,OAAX,CAAzB;AACA,eAAO,IAAP;AACD;;AACD,aAAO,KAAP;AACD","sourcesContent":["import {\n  ILayer,\n  ILayerPlugin,\n  ILngLat,\n  IMapService,\n  TYPES,\n} from '@antv/l7-core';\nimport Source from '@antv/l7-source';\nimport { injectable } from 'inversify';\nimport { cloneDeep } from 'lodash';\n\n@injectable()\nexport default class DataSourcePlugin implements ILayerPlugin {\n  protected mapService: IMapService;\n  public apply(layer: ILayer) {\n    this.mapService = layer.getContainer().get<IMapService>(TYPES.IMapService);\n    layer.hooks.init.tap('DataSourcePlugin', () => {\n      const source = layer.getSource();\n      if (!source) {\n        const { data, options } = layer.sourceOption;\n        layer.setSource(new Source(data, options));\n      }\n\n      this.updateClusterData(layer);\n    });\n\n    // 检测数据是否需要更新\n    layer.hooks.beforeRenderData.tap('DataSourcePlugin', () => {\n      const neeUpdateCluster = this.updateClusterData(layer);\n      const dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n      layer.dataState.dataSourceNeedUpdate = false;\n      return neeUpdateCluster || dataSourceNeedUpdate;\n    });\n  }\n\n  private updateClusterData(layer: ILayer): boolean {\n    const source = layer.getSource();\n    const cluster = source.cluster;\n    const { zoom = 0, maxZoom = 16 } = source.clusterOptions;\n    const newZoom = this.mapService.getZoom() - 1;\n    const dataSourceNeedUpdate = layer.dataState.dataSourceNeedUpdate;\n    // 如果 dataSource 有更新，跳过 zoom 的判断，直接更新一次\n    if (\n      cluster &&\n      (dataSourceNeedUpdate || Math.abs(zoom - newZoom) > 1) &&\n      maxZoom > zoom\n    ) {\n      source.updateClusterData(Math.floor(newZoom));\n      return true;\n    }\n    return false;\n  }\n}\n"],"file":"DataSourcePlugin.js"}