var _excluded = ["type", "position"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { Logo, Scale, Zoom, Layers } from '@antv/l7';
import React, { useRef, useEffect } from 'react';
import { useSceneValue } from './SceneContext';
export default /*#__PURE__*/React.memo(function MapControl(props) {
  var scene = useSceneValue();
  var control = useRef();

  var type = props.type,
      position = props.position,
      rest = _objectWithoutProperties(props, _excluded);

  useEffect(function () {
    var ctr;

    switch (type) {
      case 'scale':
        ctr = new Scale({
          position: position || 'bottomright'
        });
        break;

      case 'zoom':
        ctr = new Zoom(_objectSpread({
          position: position || 'topright'
        }, rest));
        break;

      case 'logo':
        ctr = new Logo(_objectSpread({
          position: position || 'bottomleft'
        }, rest));

      case 'layer':
        ctr = new Layers(_objectSpread({
          position: position || 'bottomleft'
        }, rest));
    }

    control.current = ctr;
    scene.addControl(ctr);
    return function () {
      control.current = undefined;
      scene.removeControl(ctr);
    };
  }, [type]);
  useEffect(function () {
    control.current && control.current.setPosition(position || 'bottomleft');
  }, [position]);
  return null;
});