{"version":3,"sources":["../../../src/services/layer/LayerService.ts"],"names":["inject","injectable","TYPES","Clock","LayerService","IRendererService","IGlobalConfigService","layer","sceneInited","init","layers","push","forEach","inited","id","find","name","layerIndex","indexOf","splice","emit","destroy","renderLayers","alreadyInRendering","clear","updateRenderOrder","filter","isVisible","hooks","beforeRenderData","call","beforeRender","render","afterRender","sort","pre","next","zIndex","animateInstanceCount","clock","start","runRender","stopRender","stop","renderService","extensionObject","OES_texture_float","color","depth","stencil","framebuffer","layerRenderID","requestAnimationFrame","bind","cancelAnimationFrame"],"mappings":"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","sourcesContent":["import { inject, injectable } from 'inversify';\nimport { ILayer } from '../..';\nimport { TYPES } from '../../types';\nimport Clock from '../../utils/clock';\nimport { IGlobalConfigService } from '../config/IConfigService';\nimport { IRendererService } from '../renderer/IRendererService';\nimport { ILayerModel, ILayerService } from './ILayerService';\n\n@injectable()\nexport default class LayerService implements ILayerService {\n  public clock = new Clock();\n\n  public alreadyInRendering: boolean = false;\n\n  private layers: ILayer[] = [];\n\n  private layerRenderID: number;\n\n  private sceneInited: boolean = false;\n\n  private animateInstanceCount: number = 0;\n\n  @inject(TYPES.IRendererService)\n  private readonly renderService: IRendererService;\n\n  @inject(TYPES.IGlobalConfigService)\n  private readonly configService: IGlobalConfigService;\n\n  public add(layer: ILayer) {\n    if (this.sceneInited) {\n      layer.init();\n    }\n    this.layers.push(layer);\n  }\n\n  public initLayers() {\n    this.sceneInited = true;\n    this.layers.forEach((layer) => {\n      if (!layer.inited) {\n        layer.init();\n      }\n    });\n  }\n\n  public getLayers(): ILayer[] {\n    return this.layers;\n  }\n\n  public getLayer(id: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.id === id);\n  }\n\n  public getLayerByName(name: string): ILayer | undefined {\n    return this.layers.find((layer) => layer.name === name);\n  }\n\n  public remove(layer: ILayer): void {\n    const layerIndex = this.layers.indexOf(layer);\n    if (layerIndex > -1) {\n      this.layers.splice(layerIndex, 1);\n    }\n    layer.emit('remove', null);\n    layer.destroy();\n    this.renderLayers();\n  }\n\n  public removeAllLayers() {\n    this.destroy();\n  }\n\n  public renderLayers() {\n    if (this.alreadyInRendering) {\n      return;\n    }\n    this.alreadyInRendering = true;\n    this.clear();\n    this.updateRenderOrder();\n    this.layers\n      .filter((layer) => layer.inited)\n      .filter((layer) => layer.isVisible())\n      .forEach((layer) => {\n        // trigger hooks\n        layer.hooks.beforeRenderData.call();\n        layer.hooks.beforeRender.call();\n        layer.render();\n        layer.hooks.afterRender.call();\n      });\n    this.alreadyInRendering = false;\n  }\n\n  public updateRenderOrder() {\n    this.layers.sort((pre: ILayer, next: ILayer) => {\n      return pre.zIndex - next.zIndex;\n    });\n  }\n\n  public destroy() {\n    this.layers.forEach((layer) => layer.destroy());\n    this.layers = [];\n    this.renderLayers();\n  }\n\n  public startAnimate() {\n    if (this.animateInstanceCount++ === 0) {\n      this.clock.start();\n      this.runRender();\n    }\n  }\n\n  public stopAnimate() {\n    if (--this.animateInstanceCount === 0) {\n      this.stopRender();\n      this.clock.stop();\n    }\n  }\n\n  public getOESTextureFloat() {\n    return this.renderService.extensionObject.OES_texture_float;\n  }\n\n  private clear() {\n    this.renderService.clear({\n      color: [0, 0, 0, 0],\n      depth: 1,\n      stencil: 0,\n      framebuffer: null,\n    });\n  }\n\n  private runRender() {\n    this.renderLayers();\n    this.layerRenderID = requestAnimationFrame(this.runRender.bind(this));\n  }\n\n  private stopRender() {\n    cancelAnimationFrame(this.layerRenderID);\n  }\n}\n"],"file":"LayerService.js"}