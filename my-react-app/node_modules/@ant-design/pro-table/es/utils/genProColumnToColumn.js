function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { runFunction } from '@ant-design/pro-utils';
import { omitBoolean, omitUndefinedAndEmptyArr } from '@ant-design/pro-utils';
import { proFieldParsingValueEnumToArray } from '@ant-design/pro-field';
import { genColumnKey } from './index';
import { defaultOnFilter, renderColumnsTitle, columnRender } from './columnRender';
/**
 * 转化 columns 到 pro 的格式 主要是 render 方法的自行实现
 *
 * @param columns
 * @param map
 * @param columnEmptyText
 */

export function genProColumnToColumn(props) {
  var columns = props.columns,
      counter = props.counter,
      columnEmptyText = props.columnEmptyText,
      type = props.type,
      editableUtils = props.editableUtils;
  return columns.map(function (columnProps, columnsIndex) {
    var key = columnProps.key,
        dataIndex = columnProps.dataIndex,
        valueEnum = columnProps.valueEnum,
        _columnProps$valueTyp = columnProps.valueType,
        valueType = _columnProps$valueTyp === void 0 ? 'text' : _columnProps$valueTyp,
        children = columnProps.children,
        onFilter = columnProps.onFilter,
        _columnProps$filters = columnProps.filters,
        filters = _columnProps$filters === void 0 ? [] : _columnProps$filters;
    var columnKey = genColumnKey(key, columnsIndex); // 这些都没有，说明是普通的表格不需要 pro 管理

    var noNeedPro = !valueEnum && !valueType && !children;

    if (noNeedPro) {
      return _objectSpread({
        index: columnsIndex
      }, columnProps);
    }

    var config = counter.columnsMap[columnKey] || {
      fixed: columnProps.fixed
    };

    var genOnFilter = function genOnFilter() {
      if (onFilter === true) {
        return function (value, row) {
          return defaultOnFilter(value, row, dataIndex);
        };
      }

      return omitBoolean(onFilter);
    };

    var tempColumns = _objectSpread(_objectSpread({
      index: columnsIndex
    }, columnProps), {}, {
      title: renderColumnsTitle(columnProps),
      valueEnum: valueEnum,
      filters: filters === true ? proFieldParsingValueEnumToArray(runFunction(valueEnum, undefined)).filter(function (valueItem) {
        return valueItem && valueItem.value !== 'all';
      }) : filters,
      onFilter: genOnFilter(),
      ellipsis: false,
      fixed: config.fixed,
      width: columnProps.width || (columnProps.fixed ? 200 : undefined),
      children: columnProps.children ? genProColumnToColumn(_objectSpread(_objectSpread({}, props), {}, {
        columns: columnProps === null || columnProps === void 0 ? void 0 : columnProps.children
      })) : undefined,
      render: function render(text, rowData, index) {
        var renderProps = {
          columnProps: columnProps,
          text: text,
          rowData: rowData,
          index: index,
          columnEmptyText: columnEmptyText,
          counter: counter,
          type: type,
          editableUtils: editableUtils
        };
        return columnRender(renderProps);
      }
    });

    return omitUndefinedAndEmptyArr(tempColumns);
  }).filter(function (item) {
    return !item.hideInTable;
  });
}